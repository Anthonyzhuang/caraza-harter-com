==================================================

same name, different things in different contexts(s)
 - different files, same file name
 - different functions, same function name
 - different steets, same street name
 - different students, same name (e.g., Matthew)

talk about CONTEXT!  Same name means different things depending on the
situation.

==================================================

frames (s)
 - a frame is a groups of variables
 - every time a function is invoked, a frame is created for it
 - stack diagrams

==================================================

PythonTutor, getting used to looking at frames:

def f():
    x = 1
    print(x)

def g():
    y = 2
    print(x)

def h():
    z = 3
    print(x)

f()
g()
h()

==================================================

def f():
    x = 1
    print(x)
    g()

def g():
    y = 2
    print(y)
    h()

def h():
    z = 3
    print(z)

f()

==================================================

def f():
    x = 1
    print(x)
    g()

def g():
    x = 2
    print(x)
    h()

def h():
    x = 3
    print(x)

f()

==================================================

LESSONS ABOUT LOCAL VARIABLES

==================================================

# function definition vs invocation

def set_x():
    x = 100

print(x)

# LESSON: functions don't execute unless they're called

==================================================

# variable lifetime

def set_x():
    x = 100

set_x()
print(x)

# LESSON: variables created in a function die after function returns

==================================================

# function variables do not persist between calls

def count():
    x = 1
    x += 1
    print(x)

count()
count()
count()

# LESSON: variables start fresh every time a function is called again

==================================================

# why doesn't this work?

def display_x():
    print(x)

def main():
    x = 100
    display_x()

# LESSON: you can't see the variables of other function invocations,
  even those that call you

==================================================

# LESSONS ABOUT GLOBAL VARIABLES

==================================================

VERSION 1:

# show global frame in PythonTutor

msg = 'hello' # global, because outside any function

def greeting():
    print(msg)

print('before: ' + msg)
greeting()
print('after: ' + msg)

# LESSON: you can generally just use global variables inside a function

----------------------------------------

VERSION 2:

msg = 'hello'

def greeting():
    msg = 'welcome!'
    print('greeting: ' + msg)

print('before: ' + msg)
greeting()
print('after: ' + msg)

# LESSON: if you do an assignment to a variable in a function, Python assumes you want it local

----------------------------------------

VERSION 3:

msg = 'hello'

def greeting():
    print('greeting: ' + msg)
    msg = 'welcome!'

print('before: ' + msg)
greeting()
print('after: ' + msg)

# LESSON: assignment to a variable should be before its use in a
# function, even if there's a a global variable with the same name

VERSION 4:

msg = 'hello'

def greeting():
    global msg
    print('greeting: ' + msg)
    msg = 'welcome!'

print('before: ' + msg)
greeting()
print('after: ' + msg)

# LESSON: use a global declaration to prevent Python from creating a
# local variable when you want a global variable

==================================================

# LESSONS ABOUT ARGUMENT PASSING

def f(x):
    x = 'B'
    print('inside: ' + x)

val = 'A'
print('before: ' + val)
f(val)
print('after: ' + val)

# LESSON: in Python, arguments are "passed by value", meaning changes
# to a parameter inside the function don't change the argument outside

==================================================

def f(x):
    x = 'B'
    print('inside: ' + x)

x = 'A'
print('before: ' + x)
f(x)
print('after: ' + x)

# LESSON: it's irrelevant whether the argument (outside) and parameter
# (inside) have the same variable name
